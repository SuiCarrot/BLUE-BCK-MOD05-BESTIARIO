generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  name     String
  email    String    @unique
  password String
  cpf      String    @unique
  isAdmin  Boolean   @default(false) @map("is_admin")
  profiles Profile[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

model Profile {
  id String @id @default(uuid())

  title    String
  imageUrl String     @map("image_url")
  user     User       @relation(fields: [userId], references: [id])
  userId   String     @map("user_id")
  creature Bestiary[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("profile")
}

model Creature {
  id String @id @default(uuid())

  name        String      @unique
  imageUrl    String      @map("cover_image")
  description String
  reference   Reference[]
  profile     Bestiary[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("game")
}

model Reference {
  id String @id @default(uuid())

  name     String     @unique
  genre    String
  media    String
  creature Creature[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")


  @@map("gender")
}

model Bestiary {
  id         String   @id @default(uuid())
  creature   Creature @relation(fields: [creatureId], references: [id])
  creatureId String   @map("creature_id")
  profile    Profile  @relation(fields: [profileId], references: [id])
  profileId  String   @map("profile_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("creature_profile")
}
